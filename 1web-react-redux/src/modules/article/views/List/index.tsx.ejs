import React, {useCallback, useEffect, useRef} from 'react';
import {DocumentHead, connectRedux, Link, Dispatch} from '@elux/react-redux-web';
import {APPState, GetRouter, Modules} from '@/Global';
import TabBar from '@/components/TabBar';
import NavBar from '@/components/NavBar';
import SearchBar from '../../components/SearchBar';
import Pagination from '../../components/Pagination';
import {ListItem, ListSearch, ListSummary} from '../../entity';
import styles from './index.module.<%= css %>';

interface StoreProps {
  listSearch?: ListSearch;
  list?: ListItem[];
  listSummary?: ListSummary;
}

function mapStateToProps(appState: APPState): StoreProps {
  const {listSearch, list, listSummary} = appState.article;
  return {listSearch, list, listSummary};
}

const Component: React.FC<StoreProps & {dispatch: Dispatch}> = ({listSearch, list, listSummary, dispatch}) => {
  const onPageChange = useCallback((pageCurrent: number) => {
    GetRouter().push(`/article/page/${pageCurrent}`);
  }, []);

  const onSearch = useCallback((keyword: string) => {
    const loction = GetRouter().extendCurrent({article: {listSearch: {pageCurrent: 1, keyword}}});
    GetRouter().push(loction);
  }, []);

  const onDeleteItem = useCallback(
    (id) => {
      dispatch(Modules.article.actions.deleteItem(id));
    },
    [dispatch]
  );

  const onEditItem = useCallback((id) => {
    GetRouter().push(`/article/edit/${id}`, true);
  }, []);

  const onCreate = useCallback(() => {
    GetRouter().push(`/article/edit/0`, true);
  }, []);

  const scrollDiv = useRef<HTMLDivElement>(null);
  useEffect(() => {
    if (scrollDiv.current) {
      scrollDiv.current.scrollTop = 0;
    }
  }, [listSummary?.pageCurrent]);
  return (
    <>
      <DocumentHead title="文章" />
      <NavBar title="文章列表" />
      <div className={`${styles.root} g-page-content`}>
        {listSearch && list && listSummary && (
          <>
            <SearchBar keyword={listSearch.keyword} onSubmit={onSearch} onCreate={onCreate} />
            <div className="article-list" ref={scrollDiv}>
              {list.map((item) => (
                <div key={item.id} className="article-item">
                  <Link className="article-title" route={`/article/detail/${item.id}`} root<%= platform === 'ssr' ? ' href={`/article/detail/${item.id}`}' : '' %>>
                    {item.title}
                  </Link>
                  <Link className="article-summary" route={`/article/detail/${item.id}`} root<%= platform === 'ssr' ? ' href={`/article/detail/${item.id}`}' : '' %>>
                    {item.summary}
                  </Link>
                  <div className="article-operation">
                    <div className="item" onClick={() => onEditItem(item.id)}>
                      修改
                    </div>
                    <div className="item" onClick={() => onDeleteItem(item.id)}>
                      删除
                    </div>
                  </div>
                </div>
              ))}
              <Pagination totalPages={listSummary.totalPages} pageCurrent={listSummary.pageCurrent} onChange={onPageChange} <%= platform === 'ssr' ? 'baseUrl="/article/page/0"' : '' %>/>
            </div>
          </>
        )}
      </div>
      <TabBar selected="article" />
    </>
  );
};

export default connectRedux(mapStateToProps)(Component);
