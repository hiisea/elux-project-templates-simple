<% if(framework ==='reactRedux'){ -%>
import {FC} from 'react';
import {Dispatch, connectRedux} from '@elux/<%= elux %>';
<% }else{ -%>
import {defineComponent} from 'vue';
import {Dispatch, exportView} from '@elux/<%= elux %>';
<% } -%>
import {APPState, RouteParams<%= framework ==='vueVuex' ? ', useStore' : '' %>} from '@/Global';
import List from './List';
import Detail from './Detail';
import Edit from './Edit';
import {ListView, ItemView, ItemDetail} from '../entity';

export interface StoreProps {
  listView?: ListView;
  itemView?: ItemView;
  itemDetail?: ItemDetail;
}

function mapStateToProps(appState: APPState): StoreProps {
  const routeParams: RouteParams = appState.route.params;
  const {listView, itemView} = routeParams.article || {};
  const {itemDetail} = appState.article;
  return {listView, itemView, itemDetail};
}

<% if(framework ==='reactRedux'){ -%>
const Component: FC<StoreProps & {dispatch: Dispatch}> = ({listView, itemView, itemDetail, dispatch}) => {
  return (
    <>
      {listView === 'list' && <List />}
      {itemView === 'detail' && itemDetail && <Detail itemDetail={itemDetail} />}
      {itemView === 'edit' && itemDetail && <Edit itemDetail={itemDetail} dispatch={dispatch} />}
    </>
  );
};

export default connectRedux(mapStateToProps)(Component);
<% }else{ -%>
const Component = defineComponent({
  setup() {
    const store = useStore();
    const appState = store.getState();
    const storeProps = computed(() => mapStateToProps(appState));
    return {store, storeProps};
  },
  render() {
    const {listView, itemView, itemDetail, {store: {dispatch}}} = this.storeProps;
    return (
      <>
        {listView === 'list' && <List />}
        {itemView === 'detail' && itemDetail && <Detail itemDetail={itemDetail} />}
        {itemView === 'edit' && itemDetail && <Edit itemDetail={itemDetail} dispatch={dispatch} />}
      </>
    );
  },
});

export default exportView(Component);
<% } -%>
