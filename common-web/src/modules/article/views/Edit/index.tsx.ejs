<% if(framework ==='reactRedux'){ -%>
import {useCallback, useState, memo, FC} from 'react';
import {Dispatch, DocumentHead} from '@elux/<%= elux %>';
<% }else{ -%>
import {defineComponent, PropType} from 'vue';
import {exportView, Dispatch, DocumentHead} from '@elux/<%= elux %>';
<% } -%>
import {Modules, GetRouter} from '@/Global';
import NavBar from '@/components/NavBar';
import {ItemDetail} from '../../entity';
import styles from './index.module.<%= css %>';

<% if(framework ==='reactRedux'){ -%>
interface OwnerProps {
  itemDetail: ItemDetail;
  dispatch: Dispatch;
}

const Component: FC<OwnerProps> = ({itemDetail, dispatch}) => {
  const onCancel = useCallback(() => GetRouter().back(1, true), []);
  const [errorMessage, setErrorMessage] = useState('');
  const [title, setTitle] = useState(itemDetail.title);
  const [summary, setSummary] = useState(itemDetail.summary);
  const [content, setContent] = useState(itemDetail.content);
  const onSubmit = () => {
    if (!title || !summary || !content) {
      setErrorMessage('请输入文章标题、摘要、内容');
    } else {
      const item = {id: itemDetail.id, title, summary, content};
      if (itemDetail.id) {
        dispatch(Modules.article.actions.updateItem(item));
      } else {
        dispatch(Modules.article.actions.createItem(item));
      }
    }
  };

  return (
    <>
      <DocumentHead title="编辑文章" />
      <NavBar title={itemDetail.id ? '修改文章' : '新建文章'} />
      <div className={`${styles.root} g-page-content`}>
        <div className="form-body">
          <div className="form-item">
            <div className="label">标题</div>
            <div className="item">
              <input
                name="title"
                className="g-input"
                type="text"
                placeholder="请输入"
                onChange={(e) => setTitle(e.target.value.trim())}
                value={title}
              />
            </div>
          </div>
          <div className="form-item">
            <div className="label">摘要</div>
            <div className="item">
              <textarea
                name="summary"
                className="g-input"
                placeholder="请输入"
                rows={2}
                onChange={(e) => setSummary(e.target.value.trim())}
                value={summary}
              />
            </div>
          </div>
          <div className="form-item">
            <div className="label">内容</div>
            <div className="item">
              <textarea
                name="content"
                className="g-input"
                placeholder="请输入"
                rows={10}
                onChange={(e) => setContent(e.target.value.trim())}
                value={content}
              />
            </div>
          </div>
        </div>
        {errorMessage && <div className="form-error">* {errorMessage}</div>}
        <div className="form-control">
          <button type="submit" className="g-button primary" onClick={onSubmit}>
            提 交
          </button>
          <button type="button" className="g-button" onClick={onCancel}>
            取 消
          </button>
        </div>
      </div>
    </>
  );
};

export default memo(Component);
<% }else{ -%>
const Component = defineComponent({
  props: {
    itemDetail: {
      type: Object as PropType<ItemDetail>,
      required: true,
    },
    dispatch: {
      type: Function as PropType<Dispatch>,
      required: true,
    }
  },
  setup(props) {
    const {itemDetail, dispatch} = props;
    const errorMessage = ref('');
    const title = ref(itemDetail.title);
    const summary = ref(itemDetail.summary);
    const content = ref(itemDetail.content);
    const onCancel = () => GetRouter().back(1);
    const onSubmit = () => {
      if (!title || !summary || !content) {
        errorMessage.value = '请输入文章标题、摘要、内容';
      } else {
        const item = {id: itemDetail.id, title, summary, content};
        if (itemDetail.id) {
          dispatch(Modules.article.actions.updateItem(item));
        } else {
          dispatch(Modules.article.actions.createItem(item));
        }
      }
    };
    return {store, title, summary, content, errorMessage, onSubmit, onCancel};
  },
  render() {
    const {store, title, summary, content, errorMessage, onSubmit, onCancel} = this;
    return (
      <>
        <DocumentHead title="编辑文章" />
        <NavBar title={itemDetail.id ? '修改文章' : '新建文章'} />
        <div class={`${styles.root} g-page-content`}>
          <div class="form-body">
            <div class="form-item">
              <div class="label">标题</div>
              <div class="item">
                <input
                  name="title"
                  class="g-input"
                  type="text"
                  placeholder="请输入"
                  v-model={title}
                />
              </div>
            </div>
            <div class="form-item">
              <div class="label">摘要</div>
              <div class="item">
                <textarea
                  name="summary"
                  class="g-input"
                  placeholder="请输入"
                  rows={2}
                  v-model={summary}
                />
              </div>
            </div>
            <div class="form-item">
              <div class="label">内容</div>
              <div class="item">
                <textarea
                  name="content"
                  class="g-input"
                  placeholder="请输入"
                  rows={10}
                  v-model={content}
                />
              </div>
            </div>
          </div>
          {errorMessage && <div class="form-error">* {errorMessage}</div>}
          <div class="form-control">
            <button type="submit" class="g-button primary" onClick={onSubmit}>
              提 交
            </button>
            <button type="button" class="g-button" onClick={onCancel}>
              取 消
            </button>
          </div>
        </div>
      </>
    );
  },
});

export default exportView(Component);
<% } -%>
