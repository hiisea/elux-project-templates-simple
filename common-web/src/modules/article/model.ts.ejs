import {BaseModel, reducer, effect} from '@elux/<%= elux %>';
import fastEqual from 'fast-deep-equal';
import {GetRouter} from '@/Global';
import {ListView, ListSearch, ItemView, ListItem, ListSummary, ItemDetail, api} from './entity';

export interface ModuleState {
  listSearch?: ListSearch;
  list?: ListItem[];
  listSummary?: ListSummary;
  itemId?: string;
  itemDetail?: ItemDetail;
}

export interface ModuleRouteParams {
  listSearch: ListSearch;
  listView: ListView;
  itemId: string;
  itemView: ItemView;
}

export class Model extends BaseModel<ModuleState, ModuleRouteParams> {
  defaultRouteParams: ModuleRouteParams = {
    listSearch: {
      pageCurrent: 1,
      keyword: '',
    },
    listView: '',
    itemId: '',
    itemView: '',
  };

  init(latestData: {[moduleName: string]: any}, ssrData: {[moduleName: string]: any}): ModuleState {
    return <%= platform==='ssr' ? 'ssrData[this.moduleName]' : '{}' %>;
  }

  @reducer
  public putList(listSearch: ListSearch, list: ListItem[], listSummary: ListSummary): <%= framework ==='reactRedux'?'ModuleState':'void' %> {
  <%_ if(framework ==='reactRedux'){ -%>
    return {...this.getState(), listSearch, list, listSummary};
  <%_ }else{ -%>
    Object.assign(this.getState(), {listSearch, list, listSummary});
  <%_ } -%>
  }

  @reducer
  public putCurrentItem(itemId = '', itemDetail: ItemDetail): <%= framework ==='reactRedux'?'ModuleState':'void' %> {
  <%_ if(framework ==='reactRedux'){ -%>
    return {...this.getState(), itemId, itemDetail};
  <%_ }else{ -%>
    Object.assign(this.getState(), {itemId, itemDetail});
  <%_ } -%>
  }

  @effect()
  public async deleteItem(id: string): Promise<void> {
    await api.deleteItem({id});
    this.dispatch(this.actions.fetchList({}));
  }

  @effect()
  public async updateItem(item: ItemDetail): Promise<void> {
    await api.updateItem(item);
    await GetRouter().back(1, true);
    this.dispatch(this.actions.fetchList({}));
  }

  @effect()
  public async createItem(item: ItemDetail): Promise<void> {
    await api.createItem(item);
    await GetRouter().back(1, true);
    this.dispatch(this.actions.fetchList({pageCurrent: 1}));
  }

  @effect()
  public async fetchList(args: Partial<ListSearch>): Promise<void> {
    const listSearch = {...this.defaultRouteParams.listSearch, ...this.getState().listSearch, ...args};
    const {list, listSummary} = await api.getList(listSearch);
    this.dispatch(this.actions.putList(listSearch, list, listSummary));
  }

  @effect()
  public async fetchItem(itemId: string): Promise<void> {
    let item: ItemDetail;
    if (itemId === '0') {
      item = {id: '', title: '', summary: '', content: ''};
    } else {
      item = await api.getItem({id: itemId});
    }
    this.dispatch(this.actions.putCurrentItem(itemId, item));
  }

  @effect(null)
  protected async ['this.Init, this.RouteChange'](): Promise<void> {
    const {listView, listSearch, itemView, itemId} = this.getRouteParams();
    const state = this.getState();
    if (listView) {
      if (!fastEqual(listSearch, state.listSearch)) {
        <%= platform==='ssr' ? 'await ' : '' %>this.dispatch(this.actions.fetchList(listSearch));
      }
    }
    if (itemView) {
      if (itemId && itemId !== state.itemId) {
        <%= platform==='ssr' ? 'await ' : '' %>this.dispatch(this.actions.fetchItem(itemId));
      }
    }
  }
}
