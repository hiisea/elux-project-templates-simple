<% if(render ==='tpl'){ -%>
<template>
  <DocumentHead title="Elux" />
  <Switch>
    <LoginForm v-if="subView === 'login'" />
    <Article v-if="routeParams.article" />
    <My v-if="routeParams.my" />
    <template #elseView>
      <NotFound />
    </template>
  </Switch>
  <LoadingPanel :loadingState="globalLoading" />
</template>
<% } -%>
<% if(framework ==='reactRedux'){ -%>
import {FC} from 'react';
import {connectRedux} from '@elux/<%= elux %>';
<% }else{ -%>
import {defineComponent, computed, DefineComponent} from 'vue';
import {exportView, ComputedStore} from '@elux/<%= elux %>';
<% } -%>
import {LoadingState, DocumentHead, Switch} from '@elux/<%= elux %>';
import {LoadComponent, RouteParams, APPState<%= framework ==='vueVuex' ? ', useStore' : '' %>} from '@/Global';
import LoadingPanel from '@/components/LoadingPanel.vue';
import NotFound from './NotFound.vue';
import LoginForm from './LoginForm.vue';
import {SubView} from '../entity';
import '@/assets/css/global.module.less';

const Article = LoadComponent('article', 'main');
const My = LoadComponent('my', 'main');

export interface StoreProps {
  subView?: SubView;
  globalLoading?: LoadingState;
  routeParams: RouteParams;
}

<% if(framework ==='reactRedux'){ -%>
function mapStateToProps(appState: APPState): StoreProps {
  const stage = appState.stage;
  const routeParams = appState.route.params;
  return {
    routeParams,
    globalLoading: stage.loading?.global,
    subView: routeParams.stage?.subView,
  };
}

const Component: FC<StoreProps> = ({globalLoading, subView, routeParams}) => {
  return (
    <>
      <DocumentHead title="Elux" />
      <Switch elseView={<NotFound />}>
        {subView === 'login' && <LoginForm />}
        {routeParams.article && <Article />}
        {routeParams.my && <My />}
      </Switch>
      <LoadingPanel loadingState={globalLoading} />
    </>
  );
};

export default connectRedux(mapStateToProps)(Component);
<% }else{ -%>
function mapStateToProps({stage, route}: APPState): ComputedStore<StoreProps> {
  return {
    routeParams: () => route.params,
    globalLoading: () => stage.loading?.global,
    subView: () => route.params.stage?.subView,
  };
}

const Component: DefineComponent<{}> = defineComponent({
  name: 'StageMain',
  <%_ if(render ==='tpl'){ -%>
  components: {
    DocumentHead,
    Switch,
    NotFound,
    LoginForm,
    LoadingPanel,
    Article,
    My,
  },
  <%_ } -%>
  setup() {
    const store = useStore();
    const computedStore = mapStateToProps(store.getState());
    const routeParams = computed(computedStore.routeParams);
    const globalLoading = computed(computedStore.globalLoading);
    const subView = computed(computedStore.subView);
    return {globalLoading, routeParams, subView};
  },
  <%_ if(render !=='tpl'){ -%>
  render() {
    const {globalLoading, routeParams, subView} = this;
    return (
      <>
        <DocumentHead title="Elux" />
        <Switch elseView={<NotFound />}>
          {subView === 'login' && <LoginForm />}
          {routeParams.article && <Article />}
          {routeParams.my && <My />}
        </Switch>
        <LoadingPanel loadingState={globalLoading} />
      </>
    );
  },
  <%_ } -%>
});

export default exportView(Component);
<% } -%>
