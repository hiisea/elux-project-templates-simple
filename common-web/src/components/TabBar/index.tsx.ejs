<% if(render ==='tpl'){ -%>
<template>
  <div :class="$style.root">
    <Link route="/article/page" action="relaunch" :class="{item: true, on: selected === 'article'}"<%= platform === 'ssr' ? ' href="/article/page"' : '' %>>文章</Link>
    <Link route="/my" action="relaunch" :class="{item: true, on: selected === 'my'}"<%= platform === 'ssr' ? ' href="/my"' : '' %>>我的</Link>
  </div>
</template>
<% } -%>
<% if(framework ==='reactRedux'){ -%>
import {memo, FC} from 'react';
<% }else{ -%>
import {defineComponent, PropType} from 'vue';
<% } -%>
import {Link} from '@elux/<%= elux %>';
import styles from './index.module.less';

<% if(framework ==='reactRedux'){ -%>
interface Props {
  selected: 'article' | 'my';
}

const Component: FC<Props> = ({selected}) => {
  return (
    <div className={styles.root}>
      <Link route="/article/page" action="relaunch" className={`item ${selected === 'article' ? 'on' : ''}`}<%= platform === 'ssr' ? ' href="/article/page"' : '' %>>
        文章
      </Link>
      <Link route="/my" action="relaunch" className={`item ${selected === 'my' ? 'on' : ''}`}<%= platform === 'ssr' ? ' href="/my"' : '' %>>
        我的
      </Link>
    </div>
  );
};

export default memo(Component);
<% }else{ -%>
export default defineComponent({
  name: 'TabBar',
  <%_ if(render ==='tpl'){ -%>
  components: {
    Link,
  },
  <%_ } -%>
  props: {
    selected: {
      type: String as PropType<'article' | 'my'>,
      required: true,
    },
  },
  <%_ if(render !=='tpl'){ -%>
  render() {
    const {selected} = this;

    return (
      <div class={styles.root}>
        <Link route="/article/page" action="relaunch" class={{item: true, on: selected === 'article'}}<%= platform === 'ssr' ? ' href="/article/page"' : '' %>>
          文章
        </Link>
        <Link route="/my" action="relaunch" class={{item: true, on: selected === 'my'}}<%= platform === 'ssr' ? ' href="/my"' : '' %>>
          我的
        </Link>
      </div>
    );
  },
  <%_ } -%>
});
<% } -%>
