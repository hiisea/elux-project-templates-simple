<% if(render ==='tpl'){ -%>
<template>
  <div :class="$style.root">
    <div v-if="callback" class="back" @click="callback" />
    <div class="title">{{ title }}</div>
  </div>
</template>
<% } -%>
<% if(framework ==='reactRedux'){ -%>
import {memo, FC} from 'react';
<% }else{ -%>
import {defineComponent, PropType} from 'vue';
<% } -%>
import {GetRouter} from '@/Global';
import styles from './index.module.less';

const defaultOnBack = () => GetRouter().back(1, true);

<% if(framework ==='reactRedux'){ -%>
interface Props {
  title: string;
  onBack?: Boolean | (() => void);
}

const Component: FC<Props> = ({title, onBack}) => {
  const callback = typeof onBack === 'function' ? onBack : onBack === true ? defaultOnBack : null;

  return (
    <div className={styles.root}>
      {callback && <div className="back" onClick={callback} />}
      <div className="title">{title}</div>
    </div>
  );
};

export default memo(Component);
<% }else{ -%>
export default defineComponent({
  name: 'NavBar',
  props: {
    title: {
      type: String,
      required: true,
    },
    onBack: {
      type: [Function, Boolean] as PropType<Boolean | (() => void)>,
    },
  },
  setup(props) {
    const callback = typeof props.onBack === 'function' ? props.onBack : props.onBack === true ? defaultOnBack : null;
    return {callback};
  },
  <%_ if(render !=='tpl'){ -%>
  render() {
    const {title, callback} = this;

    return (
      <div class={styles.root}>
        {callback && <div class="back" onClick={callback} />}
        <div class="title">{title}</div>
      </div>
    );
  },
  <%_ } -%>
});
<% } -%>
