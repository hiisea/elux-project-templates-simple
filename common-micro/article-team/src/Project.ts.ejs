/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
import {createRouteModule, DeepPartial, routeJsonParse, exportModule, exportComponent, EmptyModuleHandlers, PagenameMap} from '@elux/<%= elux %>';
import {RouteParams} from '@/Global';
import stage from '@/modules/stage';

type PartialRouteParams = DeepPartial<RouteParams>;

const pagenameMap: PagenameMap<'/index' | '/article/page' | '/article/detail' | '/article/edit' | '/login'> = {
  '/index': {
    pathToParams() {
      const pathParams: PartialRouteParams = {
        stage: {},
        article: {listView: 'list', listSearch: {pageCurrent: 1}},
      };
      return pathParams;
    },
    paramsToPath(params: PartialRouteParams) {
      return [];
    },
  },
  '/article/page': {
    pathToParams([pageCurrent]: string[]) {
      const pathParams: PartialRouteParams = {
        stage: {},
        article: {listView: 'list', listSearch: {pageCurrent: parseInt(pageCurrent, 10) || 1}},
      };
      return pathParams;
    },
    paramsToPath(params: PartialRouteParams) {
      const pageCurrent = params.article?.listSearch?.pageCurrent?.toString();
      return [pageCurrent];
    },
  },
  '/article/detail': {
    pathToParams([id]: string[]) {
      const pathParams: PartialRouteParams = {
        stage: {},
        article: {itemId: id, itemView: 'detail'},
      };
      return pathParams;
    },
    paramsToPath(params: PartialRouteParams) {
      const id = params.article?.itemId;
      return [id];
    },
  },
  '/article/edit': {
    pathToParams([id]: string[]) {
      const pathParams: PartialRouteParams = {
        stage: {},
        article: {itemId: id, itemView: 'edit'},
      };
      return pathParams;
    },
    paramsToPath(params: PartialRouteParams) {
      const id = params.article?.itemId;
      return [id];
    },
  },
  '/login': {
    pathToParams() {
      const pathParams: PartialRouteParams = {stage: {subView: 'login'}};
      return pathParams;
    },
    paramsToPath() {
      return [];
    },
  },
};
const routeModule = createRouteModule('route', pagenameMap, {
  in(nativeLocation) {
    const {pathname, query} = nativeLocation;
    const args = routeJsonParse(query);
    return {pathmatch: pathname, args};
  },
  out(eluxLocation) {
    const {pathmatch, args} = eluxLocation;
    return {pathname: pathmatch, query: Object.keys(args).length ? JSON.stringify(args) : ''};
  },
});

export const MockComponent = exportComponent(() => null);

export const moduleGetter = {
  route: () => routeModule,
  stage: () => stage,
  article: () => import('@/modules/article'),
  my: () => exportModule('my', EmptyModuleHandlers, {}, {main: MockComponent}),
};

export type ModuleGetter = typeof moduleGetter;
